name: Firebase Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '22'
  YARN_VERSION: '4.9.2'

jobs:
  deploy:
    name: Deploy to Firebase App Hosting
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.event.inputs.environment || 'production' }}
      url: ${{ steps.deploy.outputs.details_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run pre-deployment checks
        run: |
          yarn lint
          yarn typecheck
          echo "‚úÖ Pre-deployment checks passed"

      - name: Build application
        run: yarn build
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Verify build output
        run: |
          if [ ! -d ".next" ]; then
            echo "‚ùå Build failed - .next directory not found"
            exit 1
          fi
          
          # Check for critical build files
          if [ ! -f ".next/BUILD_ID" ]; then
            echo "‚ùå Build incomplete - BUILD_ID missing"
            exit 1
          fi
          
          echo "‚úÖ Build verification passed"
          echo "Build ID: $(cat .next/BUILD_ID)"

      - name: Setup Firebase CLI
        uses: w9jds/setup-firebase@main
        with:
          firebase_token: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy to Firebase App Hosting
        id: deploy
        run: |
          # Configure Firebase project
          firebase use ${{ secrets.FIREBASE_PROJECT_ID }}
          
          # Deploy with Firebase App Hosting
          firebase deploy --only hosting
          
          # Get deployment URL
          DEPLOY_URL=$(firebase hosting:channel:list --json | jq -r '.result[] | select(.name == "live") | .url')
          echo "details_url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployment successful to: $DEPLOY_URL"

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ steps.deploy.outcome }}" = "success" ]; then
            echo "‚úÖ Deployment completed successfully"
            echo "üåê Site URL: ${{ steps.deploy.outputs.details_url }}"
          else
            echo "‚ùå Deployment failed"
            exit 1
          fi

      - name: Post-deployment verification
        run: |
          # Wait a moment for deployment to propagate
          sleep 30
          
          # Basic health check
          SITE_URL="${{ steps.deploy.outputs.details_url }}"
          if [ -n "$SITE_URL" ]; then
            HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$SITE_URL" || echo "000")
            if [ "$HTTP_CODE" = "200" ]; then
              echo "‚úÖ Site is responding correctly (HTTP $HTTP_CODE)"
            else
              echo "‚ö†Ô∏è  Site returned HTTP $HTTP_CODE - may need investigation"
            fi
          fi

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
      - name: Notify success
        if: needs.deploy.result == 'success'
        run: |
          echo "üöÄ AniTrend Website deployed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Timestamp: $(date -u)"

      - name: Notify failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "‚ùå AniTrend Website deployment failed!"
          echo "Please check the deployment logs and try again."
          exit 1
