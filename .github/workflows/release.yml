name: Release Management

on:
  push:
    tags:
      - '*'  # Only trigger on version tags like v1.0.0
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      release_notes:
        description: 'Release notes'
        required: false
        type: string

env:
  NODE_VERSION: '22'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "üöß This is a pre-release: $VERSION"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "üöÄ This is a stable release: $VERSION"
          fi

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run full test suite
        run: |
          echo "üß™ Running full validation suite for release..."
          yarn lint
          yarn typecheck
          yarn build
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

      - name: Security audit
        run: |
          echo "üîç Running security audit..."
          yarn audit --groups dependencies --level moderate

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Build optimized production build
        run: |
          echo "üèóÔ∏è  Building optimized production build..."
          NODE_ENV=production yarn build
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_API_KEY: ${{ secrets.NEXT_PUBLIC_FIREBASE_API_KEY }}
          NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN: ${{ secrets.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN }}
          NEXT_PUBLIC_FIREBASE_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_PROJECT_ID }}
          NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET }}
          NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID }}
          NEXT_PUBLIC_FIREBASE_APP_ID: ${{ secrets.NEXT_PUBLIC_FIREBASE_APP_ID }}

      - name: Generate build info
        run: |
          echo "üìä Generating build information..."
          
          BUILD_SIZE=$(du -sh .next | cut -f1)
          STATIC_SIZE=$(du -sh .next/static | cut -f1)
          BUILD_TIME=$(date -u)
          
          cat > build-info.json << EOF
          {
            "version": "${{ needs.validate-release.outputs.version }}",
            "buildTime": "$BUILD_TIME",
            "buildSize": "$BUILD_SIZE",
            "staticSize": "$STATIC_SIZE",
            "nodeVersion": "${{ env.NODE_VERSION }}",
            "commit": "${{ github.sha }}"
          }
          EOF
          
          echo "Build Information:"
          cat build-info.json | jq .

      - name: Create release artifacts
        run: |
          echo "üì¶ Creating release artifacts..."
          
          # Create a tarball of the build
          tar -czf anitrend-website-${{ needs.validate-release.outputs.version }}.tar.gz \
            .next/ \
            public/ \
            package.json \
            yarn.lock \
            next.config.ts \
            apphosting.yaml \
            build-info.json
          
          # Generate checksums
          sha256sum anitrend-website-${{ needs.validate-release.outputs.version }}.tar.gz > checksums.txt
          
          echo "üìã Release artifacts created:"
          ls -la anitrend-website-*.tar.gz checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-build-${{ needs.validate-release.outputs.version }}
          path: |
            anitrend-website-${{ needs.validate-release.outputs.version }}.tar.gz
            checksums.txt
            build-info.json

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-build-${{ needs.validate-release.outputs.version }}

      - name: Extract build
        run: |
          tar -xzf anitrend-website-${{ needs.validate-release.outputs.version }}.tar.gz

      - name: Setup Firebase CLI
        uses: w9jds/setup-firebase@main
        with:
          firebase_token: ${{ secrets.FIREBASE_TOKEN }}

      - name: Deploy to Firebase
        run: |
          echo "üöÄ Deploying release to Firebase App Hosting..."
          firebase use ${{ secrets.FIREBASE_PROJECT_ID }}
          firebase deploy --only hosting --message "Release ${{ needs.validate-release.outputs.version }}"

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release, deploy-release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: release-build-${{ needs.validate-release.outputs.version }}

      - name: Generate release notes
        id: release_notes
        run: |
          if [ -n "${{ github.event.inputs.release_notes }}" ]; then
            NOTES="${{ github.event.inputs.release_notes }}"
          else
            # Auto-generate release notes from recent commits
            NOTES="## What's Changed\n\n"
            
            # Get commits since last tag
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ]; then
              NOTES="$NOTES$(git log $LAST_TAG..HEAD --pretty=format:'- %s (%h)' --reverse)\n\n"
            else
              NOTES="$NOTES$(git log --pretty=format:'- %s (%h)' -10 --reverse)\n\n"
            fi
            
            NOTES="$NOTES## Build Information\n\n"
            NOTES="$NOTES- **Build Time**: $(jq -r '.buildTime' build-info.json)\n"
            NOTES="$NOTES- **Build Size**: $(jq -r '.buildSize' build-info.json)\n"
            NOTES="$NOTES- **Static Assets**: $(jq -r '.staticSize' build-info.json)\n"
            NOTES="$NOTES- **Node Version**: $(jq -r '.nodeVersion' build-info.json)\n"
            NOTES="$NOTES- **Commit**: $(jq -r '.commit' build-info.json)\n"
          fi
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo -e "$NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: AniTrend Website ${{ needs.validate-release.outputs.version }}
          body: ${{ steps.release_notes.outputs.notes }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease }}
          files: |
            anitrend-website-${{ needs.validate-release.outputs.version }}.tar.gz
            checksums.txt
            build-info.json
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-github-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Update version in package.json
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          
          # Update package.json version
          if command -v jq >/dev/null 2>&1; then
            jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
            mv package.json.tmp package.json
          else
            sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
          fi
          
          echo "üìù Updated package.json version to $VERSION"

      - name: Create version update PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ needs.validate-release.outputs.version }}"
          title: "üîñ Version Bump - ${{ needs.validate-release.outputs.version }}"
          body: |
            ## Version Update
            
            This PR updates the package.json version to match the latest release.
            
            **Release**: ${{ needs.validate-release.outputs.version }}
            **Auto-generated**: Yes
            
            This should be merged after the release is confirmed to be working correctly.
          branch: version-bump/${{ needs.validate-release.outputs.version }}
          delete-branch: true
          labels: |
            version
            automated

      - name: Notify success
        run: |
          echo "üéâ Release ${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "‚úÖ Build validated and deployed"
          echo "‚úÖ GitHub release created"
          echo "‚úÖ Firebase deployment completed"
          echo "‚úÖ Version bump PR created"
