name: Deploy

on:
  workflow_call:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to build against'
        required: true
        default: 'latest'
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
  push:
    branches:
      - dev
    tags: 
      - '*'

env:
  NODE_VERSION: '22'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag }}"
          elif [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            # Fallback for branch builds; use short SHA
            VERSION="sha-${GITHUB_SHA::7}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Check if this is a prerelease (contains alpha, beta, rc)
          if [[ $VERSION =~ (alpha|beta|rc) ]]; then
            echo "is_prerelease=true" >> $GITHUB_OUTPUT
            echo "🚧 This is a pre-release: $VERSION"
          else
            echo "is_prerelease=false" >> $GITHUB_OUTPUT
            echo "🚀 This is a stable release: $VERSION"
          fi

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Run full test suite
        run: |
          echo "🧪 Running full validation suite for release..."
          yarn lint
          yarn typecheck
          yarn build

      # - name: Security audit
      #   run: |
      #     echo "🔍 Running security audit..."
      #     yarn audit --groups dependencies --level moderate

  build-release:
    name: Build Release
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --immutable

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push release image
        run: |
          docker buildx create --use
          
          # Build with version tag
          docker buildx build \
          --platform linux/amd64,linux/arm64 \
          --cache-from type=registry,ref=ghcr.io/anitrend/website:cache,mode=max \
          --cache-to type=registry,ref=ghcr.io/anitrend/website:cache,mode=max \
          --tag ghcr.io/anitrend/website:${{ needs.validate-release.outputs.version }} \
          --push .
          
          # Also push latest tag for stable releases
          if [ "${{ needs.validate-release.outputs.is_prerelease }}" = "false" ]; then
            docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --cache-from type=registry,ref=ghcr.io/anitrend/website:cache,mode=max \
            --tag ghcr.io/anitrend/website:latest \
            --push .
          fi
        working-directory: .

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Update version in package.json
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove 'v' prefix if present
          VERSION=${VERSION#v}
          
          # Update package.json version
          if command -v jq >/dev/null 2>&1; then
            jq --arg version "$VERSION" '.version = $version' package.json > package.json.tmp
            mv package.json.tmp package.json
          else
            sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
          fi
          
          echo "📝 Updated package.json version to $VERSION"

      - name: Create version update PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ needs.validate-release.outputs.version }}"
          title: "🔖 Version Bump - ${{ needs.validate-release.outputs.version }}"
          body: |
            ## Version Update
            
            This PR updates the package.json version to match the latest release.
            
            **Release**: ${{ needs.validate-release.outputs.version }}
            **Auto-generated**: Yes
            
            This should be merged after the release is confirmed to be working correctly.
          branch: version-bump/${{ needs.validate-release.outputs.version }}
          delete-branch: true
          labels: |
            version
            automated

      - name: Notify success
        run: |
          echo "🎉 Release ${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "✅ Build validated and deployed"
          echo "✅ GitHub release created"
          echo "✅ Docker image published to GHCR"
          echo "✅ Version bump PR created"

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: build-release
    if: always()
    steps:
      - name: Notify success
        if: needs.build-release.result == 'success'
        run: |
          echo "Deployed successfully!"
          echo "Environment: ${{ github.event.inputs.environment || 'production' }}"
          echo "Commit: ${{ github.sha }}"
          echo "Timestamp: $(date -u)"
          
      - name: Notify failure
        if: needs.build-release.result == 'failure'
        run: |
          echo "Deployment failed!"
          echo "Please check the deployment logs and try again."
          exit 1
